{
  "package_name": "com.walturn.my_app",
  "project_description": "The Flutter application features a virtual pet management system, allowing users to create, care for, and monitor the well-being of their pet. The application includes several mini-games, such as feeding, cleaning, and exercising the pet, as well as a pet shop for purchasing items. The user can track the pet's various stats, including hunger, happiness, health, cleanliness, and energy, and the pet will evolve through different life stages as the user interacts with it. The application also includes a startup screen, home screen, and dialogs for pet evolution and death.",
  "architecture_overview": "The application is built using the Stacked architecture, which separates the concerns of the UI, view models, and services. It uses Stacked for state management, routing, and dependency injection. The main components include the App, AppView, and various feature-specific views and view models. The application also utilizes services for managing dialogs, bottom sheets, navigation, and time-based updates to the pet's state. The project follows a modular design, with clear separation of concerns and reusable UI components.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file provides an extension on the BuildContext class to make it easier to access the current AppLocalizations instance, which is responsible for managing the application's localization and internationalization.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizations",
          "description": "Retrieves the current AppLocalizations instance for the given BuildContext.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the Flutter application. It sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\ninterface SheetBuilder {\n  + (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  + (request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nNoticeSheet .> SheetBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides a centralized and reusable way to handle the internationalization (i18n) and localization (l10n) of the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Returns a list of localization delegates that provide the translation and formatting logic for the application's strings.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Returns a list of locales that the application supports for translation and formatting.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This file is responsible for bootstrapping the Flutter application, setting up the necessary dependencies, and running the main app widget. It serves as the entry point for the application, ensuring a consistent initialization process across different app flavors.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "This is the main entry point function that initializes the application. It sets up the app's flavor, ensures the WidgetsFlutterBinding is initialized, and configures the app's orientation, locator, dialog UI, and bottom sheet UI. Finally, it runs the main app widget provided by the caller.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the production version of the application. It sets up the initial state and configuration for the app, ensuring it runs in the production environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The entry point of the application. It calls the `bootstrap` function to initialize the app and render the `AppView`.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the Flutter application. It sets up the application's entry point and configures the application flavor to be 'development'.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application that initializes the development build of the app.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This file defines an enum called `Flavor` with two values: `production` and `development`. It represents the different flavors or environments that the application can run in.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for analytics functionality in the application. It encapsulates the implementation of analytics tracking and provides a centralized interface for managing analytics-related operations.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver class is responsible for tracking the screen views of the application using the AnalyticService. It is a NavigatorObserver that listens for navigation events and logs screen transitions to the analytics service.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + ScreenObserver()\n  + void didPush(Route<dynamic> route, Route<dynamic>? previousRoute)\n  + void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute})\n  + void didPop(Route<dynamic> route, Route<dynamic>? previousRoute)\n  - void _trackScreenView(Route<dynamic> route)\n}\n\nAnalyticService --* ScreenObserver\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a route is replaced in the navigation stack.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Logs the screen view to the AnalyticService based on the current route.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of reusable color constants that represent the primary color palette of the application. These colors are used throughout the UI to ensure a consistent and branded visual experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It provides the core functionality and business logic for displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNotice()\n  +dismissNotice()\n  +isLoading : bool\n  +noticeMessage : String\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet with the specified message.",
          "parameters": [
            "message"
          ],
          "return_type": "void"
        },
        {
          "name": "dismissNotice",
          "description": "Dismisses the currently displayed notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of common UI helper functions and constants that are used throughout the Flutter application's user interface. It serves as a centralized location for managing and accessing various UI-related utilities, ensuring consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(height: double): Widget\n  + screenWidth(context: BuildContext): double\n  + screenHeight(context: BuildContext): double\n  + screenHeightFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + screenWidthFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + halfScreenWidth(context: BuildContext): double\n  + thirdScreenWidth(context: BuildContext): double\n  + quarterScreenWidth(context: BuildContext): double\n  + getResponsiveHorizontalSpaceMedium(context: BuildContext): double\n  + getResponsiveSmallFontSize(context: BuildContext): double\n  + getResponsiveMediumFontSize(context: BuildContext): double\n  + getResponsiveLargeFontSize(context: BuildContext): double\n  + getResponsiveExtraLargeFontSize(context: BuildContext): double\n  + getResponsiveMassiveFontSize(context: BuildContext): double\n  + getResponsiveFontSize(context: BuildContext, fontSize: double, max: double): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a modal dialog.",
      "class_diagram": "@startuml\n  class NoticeSheet {\n    + NoticeSheet({required this.completer, required this.request})\n    + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n    + NoticeSheetModel viewModelBuilder(BuildContext context)\n  }\n\n  class NoticeSheetModel {\n    # NoticeSheetModel()\n  }\n\n  NoticeSheet --> NoticeSheetModel\n  @enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the NoticeSheet, which includes the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which is used to manage the state and logic of the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file contains the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the state and behavior of the main application view in a Flutter application. It serves as the ViewModel component in the Model-View-ViewModel (MVVM) architecture, which separates the presentation logic from the business logic.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main UI of the application's home screen. It provides a simple interface for displaying a counter value and allowing the user to interact with the screen by incrementing the counter, showing a dialog, or displaying a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the home screen, including the counter display, increment button, dialog button, and bottom sheet button.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to be used by the `HomeView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for handling the counter value and displaying it, as well as providing methods to show a custom dialog and a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class in this file is responsible for the initial startup screen of the application. It is the main entry point for the user when they launch the app, displaying the app's logo and a loading indicator while the app's startup logic is being executed.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the app's startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is responsible for delaying the application launch by a few seconds and then navigating to the home view, which is the main entry point of the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    -_navigationService : NavigationService\n    +runStartupLogic() : Future\n  }\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for the core startup logic of the application. It delays the application launch by 3 seconds and then navigates to the home view using the NavigationService.",
          "parameters": [
            "None"
          ],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This file defines the Firebase configuration options for the production environment of the application. It is responsible for providing the necessary Firebase-related settings and credentials to integrate the application with the Firebase services in the production environment.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:firebase_core/firebase_core.dart",
        "lib/config/firebase_options.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and data structures that are used throughout the application. It serves as a centralized repository for global configuration and settings, providing a consistent and easily accessible way to manage application-wide constants.",
      "class_diagram": "@startuml\n' Enumerations and Constants\npublicConstant totalOnboarding : int\npublicConstant onBoardingHeaderTag : String\npublicConstant pathCompliantStatement : String\npublicConstant pathTermsOfServices : String\npublicConstant defaultContactEmail : String\npublicConstant defaultContactPhone : String\npublicConstant introYoutubeId : String\npublicConstant defaultLanguagesList : List<Map<String, String>>\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for launching WhatsApp and email communication from a Flutter application. It handles the platform-specific logic to open the appropriate communication channels for the user's device.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp application or the WhatsApp web interface with a pre-filled message and recipient phone number.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email application with the specified email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The `DateUtil` class provides a set of utility functions for handling date and time data in the application, particularly when interacting with Firestore.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Extracts a `DateTime` object from a dynamic input value, which can be a `Timestamp` from Firestore, a `String` representation of a date and time, or a `DateTime` object directly.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This file defines a custom exception class `APIException` that is used to handle and propagate exceptions that occur during API service interactions. It provides a standardized way to handle and communicate errors that arise in the application's API layer.",
      "class_diagram": "@startuml\n  class APIException implements Exception {\n    -dynamic message\n    +toString(): String\n  }\n  @enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "Constructor for the `APIException` class. Allows for the creation of a new `APIException` instance with an optional error message.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the default `toString()` method to provide a string representation of the `APIException` instance, including the runtime type and the error message.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a custom extension on the Flutter `Color` class, adding utility methods for converting hexadecimal color strings to `Color` objects and integer values. This extension simplifies the process of working with color-related functionality in the application, improving developer productivity and maintainability.",
      "class_diagram": "@startuml\nclass Color {\n  +static Color fromHex(String hexColorString)\n  +static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to an integer value representing the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This file defines a singleton class 'Flavors' that is responsible for managing the current application flavor, which is typically used to differentiate between development, staging, and production environments. The main purpose of this class is to provide a centralized way to access and check the current application flavor, enabling the application to behave differently based on the specific environment it is running in.",
      "class_diagram": "@startuml\nclass Flavors {\n  - static Flavor? flavor\n  + static bool get isDev()\n  + static bool get isProd()\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class, ensuring a singleton instance.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "Flavors.factory",
          "description": "Factory constructor for the Flavors class, returning the singleton instance.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "isDev",
          "description": "Getter that returns true if the current application flavor is Flavor.development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Getter that returns true if the current application flavor is Flavor.production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The JsonUtil class is responsible for providing utility functions to handle JSON data in the application. It solves the problem of safely and consistently parsing and formatting JSON data, which is a common task in modern web and mobile applications.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  +static Map<String, dynamic> formatMap(Map<dynamic, dynamic>)\n  +static T? fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>))\n  +static List<T> formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>))\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a Map<dynamic, dynamic> to a Map<String, dynamic> by removing any null keys.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts a dynamic JSON value to an instance of type T, or returns null if the input is invalid.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a List<dynamic> of JSON objects to a List<T> by applying the given fromJson function to each object.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines an InfoAlertDialog class, which is responsible for displaying an informative alert dialog with a title, description, and a confirmation button. The primary purpose of this class is to provide a reusable and customizable way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes the DialogRequest, DialogResponse completer, and the view model as input and returns the final widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "A method that creates and returns an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the configuration options for the Firebase service in the development environment of the application. It defines the necessary credentials and settings to initialize and interact with the Firebase platform during the development phase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "flutter_dotenv"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Flutter application built using the Stacked architecture pattern. The service locator is a crucial component that allows different parts of the application to access and interact with various services and dependencies, promoting a modular and decoupled design.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "Centralized localization and internationalization (i18n) configuration export file that provides standardized access to app localization resources and supported language configurations",
      "class_diagram": "@startuml\npackage Localization {\n    [app_localizations.dart]\n    [localizations_extension.dart]\n    [supported_locales.dart]\n}\n@enduml",
      "methods": [
        {
          "name": "exportLocalizations",
          "description": "Exports core localization components for unified language support across the application",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system used throughout the application. It defines the available dialog types, registers the custom dialog builders, and provides a centralized way to interact with the dialog service.",
      "class_diagram": "@startuml\n'Hide the stereotype since it is the default for class\n'hide circle\n'hide methods\n'skinparam classAttributeIconSize 0\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n'Relationships\nDialogType *-- DialogBuilder : builds\nDialogService o-- DialogBuilder : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering the custom dialog builders for each dialog type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the Flutter application. It is responsible for setting up the overall application structure, including the navigation, localization, and event handling. This class serves as the foundation for the entire application, providing the core functionality and user experience.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main application widget tree, including the MaterialApp, navigation, localization, and event handling.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/pet_creation/pet_creation_viewmodel.dart",
      "description": "The PetCreationViewModel class is responsible for handling the logic and state management of the pet creation feature in the application. It provides the necessary functionality to create a new pet, including validating user input, interacting with the PetService to save the pet, and navigating to the pet home view after successful creation.",
      "class_diagram": "@startuml\nclass PetCreationViewModel {\n  -_petService: PetService\n  -_navigationService: NavigationService\n  -_name: String\n  -_selectedType: String?\n\n  +selectedType: String?\n  +setName(String value): void\n  +setType(String type): void\n  +createPet(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "setName",
          "description": "Sets the name of the new pet being created.",
          "parameters": [
            "value"
          ],
          "return_type": "void"
        },
        {
          "name": "setType",
          "description": "Sets the type of the new pet being created.",
          "parameters": [
            "type"
          ],
          "return_type": "void"
        },
        {
          "name": "createPet",
          "description": "Validates the user input, creates a new pet using the PetService, and navigates to the pet home view.",
          "parameters": [],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "my_app/services/pet_service.dart"
      ]
    },
    {
      "name": "lib/features/mini_games/exercise/exercise_game_viewmodel.dart",
      "description": "The ExerciseGameViewModel class is responsible for managing the logic and state of an exercise mini-game within a larger application. It handles the user's jumping actions, keeps track of the exercise points, and provides functionality to start, stop, and complete the game.",
      "class_diagram": "@startuml\nclass ExerciseGameViewModel {\n  - _gameService: GameService\n  - _navigationService: NavigationService\n  - _exerciseTimer: Timer\n  - _isJumping: bool\n  - _exercisePoints: int\n  \n  + isJumping: bool\n  + exercisePoints: int\n  \n  + startJump()\n  + stopJump()\n  + finishGame()\n  + dispose()\n}\n@enduml",
      "methods": [
        {
          "name": "startJump",
          "description": "Starts the jumping action, sets the _isJumping flag to true, and starts the exercise timer.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "stopJump",
          "description": "Stops the jumping action, sets the _isJumping flag to false, and cancels the exercise timer.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "_startExerciseTimer",
          "description": "Starts the exercise timer, which increments the _exercisePoints every 100 milliseconds.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "finishGame",
          "description": "Cancels the exercise timer, calls the playExerciseGame method in the GameService, and navigates back to the previous screen.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "dispose",
          "description": "Cancels the exercise timer and calls the parent dispose method.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/services/game_service.dart"
      ]
    },
    {
      "name": "lib/features/mini_games/feeding/feeding_game_viewmodel.dart",
      "description": "The FeedingGameViewModel class is responsible for the core logic and state management of a mini-game feature within the application. This class handles the gameplay loop, food item generation, tracking the player's score, and managing the game flow.",
      "class_diagram": "@startuml\n\nclass FoodItem {\n    +Offset position\n    +bool isCollected\n    +FoodItem(position, [isCollected = false])\n}\n\nclass FeedingGameViewModel {\n    -_gameService: GameService\n    -_navigationService: NavigationService\n    -_random: Random\n    -_gameTimer: Timer\n    -_score: double\n    -_foods: List<FoodItem>\n\n    +foods: List<FoodItem>\n    +score: double\n\n    +startGame()\n    +onTapFood(Offset tapPosition)\n    +finishGame()\n}\n\n@enduml",
      "methods": [
        {
          "name": "startGame",
          "description": "Initializes the game state by resetting the score and clearing the list of food items, then starts the game loop.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "onTapFood",
          "description": "Handles user taps on the screen, checking if a food item is tapped and updating its collected state and the player's score accordingly.",
          "parameters": [
            "Offset tapPosition"
          ],
          "return_type": "void"
        },
        {
          "name": "finishGame",
          "description": "Stops the game loop, saves the game progress, and navigates back to the previous screen.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:math",
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/services/game_service.dart"
      ]
    },
    {
      "name": "lib/features/pet_home/pet_home_viewmodel.dart",
      "description": "The PetHomeViewModel class is the main view model responsible for managing the state and functionality of the pet home screen in the application. It provides the core logic and data required to display the current state of the user's pet, as well as the ability to interact with the pet through various actions like feeding, cleaning, and exercising.",
      "class_diagram": "@startuml\nclass PetHomeViewModel {\n  +bool hasPet\n  +bool isAlive\n  +String petName\n  +String petType\n  +PetState petState\n  +String stateDisplay\n  +String ageDisplay\n  +double hunger\n  +double happiness\n  +double health\n  +double cleanliness\n  +double energy\n\n  +void init()\n  +Future<void> openShop()\n  +Future<void> startFeedingGame()\n  +Future<void> startCleaningGame()\n  +Future<void> startExerciseGame()\n  +void dispose()\n}\n\nPetHomeViewModel --> PetService\nPetHomeViewModel --> TimeService\nPetHomeViewModel --> NavigationService\nPetHomeViewModel --> BottomSheetService\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the view model by checking if the user has a pet. If not, it navigates to the pet creation view. If the user has a pet, it starts the game loop.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "openShop",
          "description": "Opens the pet shop bottom sheet, allowing the user to purchase items for their pet.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "startFeedingGame",
          "description": "Starts the feeding game view, allowing the user to feed their pet.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "startCleaningGame",
          "description": "Starts the cleaning game view, allowing the user to clean their pet.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "startExerciseGame",
          "description": "Starts the exercise game view, allowing the user to exercise their pet.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "dispose",
          "description": "Disposes of the time service and calls the parent class's dispose method.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "my_app/services/pet_service.dart",
        "my_app/services/time_service.dart",
        "my_app/models/enums/pet_state.dart"
      ]
    },
    {
      "name": "lib/features/pet_stats/pet_stats_view.dart",
      "description": "The `PetStatsView` class is responsible for displaying the current status and statistics of a user's pet. It provides a visual representation of the pet's various attributes, such as hunger, happiness, health, cleanliness, and energy levels. This view is an important part of the application's pet management functionality, allowing users to monitor their pet's well-being and make informed decisions to ensure its optimal care.",
      "class_diagram": "@startuml\nclass PetStatsView {\n  + builder(BuildContext, PetStatsViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): PetStatsViewModel\n}\n\nclass PetStatsViewModel {\n  + hasPet: bool\n  + stateDisplay: String\n  + ageDisplay: String\n  + hunger: double\n  + happiness: double\n  + health: double\n  + cleanliness: double\n  + energy: double\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The `builder` method is responsible for constructing the UI of the `PetStatsView`. It receives the current `PetStatsViewModel` instance and builds the necessary widgets to display the pet's statistics and status.",
          "parameters": [
            "BuildContext",
            "PetStatsViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating a new instance of the `PetStatsViewModel`, which provides the data and logic required by the `PetStatsView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PetStatsViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/pet_stats/pet_stats_viewmodel.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/widgets/stat_bar/stat_bar.dart"
      ]
    },
    {
      "name": "lib/features/pet_stats/pet_stats_viewmodel.dart",
      "description": "This Dart file contains the `PetStatsViewModel` class, which is responsible for managing the state and functionality related to the pet's statistics in the application. It serves as the view model for the pet statistics feature, providing the necessary data and logic to be consumed by the corresponding UI components.",
      "class_diagram": "@startuml\nclass PetStatsViewModel {\n  -_petService: PetService\n  +pet: Pet\n  +ageDisplay: String\n  +stateDisplay: String\n  +hunger: double\n  +happiness: double\n  +health: double\n  +cleanliness: double\n  +energy: double\n  +hasPet: bool\n  +isAlive: bool\n  +refreshStats()\n}\n@enduml",
      "methods": [
        {
          "name": "get pet",
          "description": "Retrieves the current pet from the `PetService`.",
          "parameters": null,
          "return_type": "Pet?"
        },
        {
          "name": "get ageDisplay",
          "description": "Generates a formatted age display string based on the pet's age in days.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "get stateDisplay",
          "description": "Retrieves the display name of the pet's current state.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "get hunger",
          "description": "Retrieves the pet's current hunger level.",
          "parameters": null,
          "return_type": "double"
        },
        {
          "name": "get happiness",
          "description": "Retrieves the pet's current happiness level.",
          "parameters": null,
          "return_type": "double"
        },
        {
          "name": "get health",
          "description": "Retrieves the pet's current health level.",
          "parameters": null,
          "return_type": "double"
        },
        {
          "name": "get cleanliness",
          "description": "Retrieves the pet's current cleanliness level.",
          "parameters": null,
          "return_type": "double"
        },
        {
          "name": "get energy",
          "description": "Retrieves the pet's current energy level.",
          "parameters": null,
          "return_type": "double"
        },
        {
          "name": "get hasPet",
          "description": "Indicates whether the user has a pet or not.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "get isAlive",
          "description": "Indicates whether the pet is alive or not.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "refreshStats",
          "description": "Notifies listeners of changes to the pet's statistics.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/services/pet_service.dart",
        "package:my_app/models/pet.dart"
      ]
    },
    {
      "name": "lib/models/enums/pet_state.dart",
      "description": "This Dart file defines an `PetState` enum that represents the different stages of a pet's life cycle within the application. It provides key functionality and information related to the current state of a pet, enabling the application to manage and track the pet's evolution through various life stages.",
      "class_diagram": "@startuml\n  enum PetState {\n    egg\n    baby\n    child\n    teen\n    adult\n    senior\n    dead\n  }\n\n  PetState {\n    + bool isAlive\n    + bool canEvolve\n    + PetState nextState()\n    + String displayName\n  }\n  @enduml",
      "methods": [
        {
          "name": "isAlive",
          "description": "Indicates whether the pet is currently alive or dead.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "canEvolve",
          "description": "Indicates whether the pet can evolve to the next life stage.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "nextState",
          "description": "Returns the next life stage for the pet, based on the current state.",
          "parameters": null,
          "return_type": "PetState"
        },
        {
          "name": "displayName",
          "description": "Returns the display name for the current pet state.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/models/pet.dart",
      "description": "The `Pet` class in this file represents a virtual pet that the user can interact with and care for. It encapsulates the core functionality and state of the pet, including its name, type, age, and various attributes such as hunger, happiness, health, cleanliness, and energy. The class provides methods for the user to perform actions like feeding, playing, cleaning, and exercising the pet, as well as handling the pet's automatic state updates and evolution over time. This file is a key component of the application's virtual pet management system, providing the essential building blocks for the user experience.",
      "class_diagram": "@startuml\nclass Pet {\n  +String name\n  +String type\n  +PetState state\n  +double hunger\n  +double happiness\n  +double health\n  +double cleanliness\n  +double energy\n  +DateTime birthDate\n  +bool isAlive\n  +int ageInDays\n  +void feed(double amount)\n  +void play(double amount)\n  +void clean(double amount)\n  +void exercise(double amount)\n  +void rest(double amount)\n  +void update()\n  +bool tryEvolve()\n  +Map<String, dynamic> toJson()\n  +factory Pet.fromJson(Map<String, dynamic> json)\n}\n@enduml",
      "methods": [
        {
          "name": "feed",
          "description": "Increases the pet's hunger level by the specified amount, up to a maximum of 100.",
          "parameters": [
            "double amount"
          ],
          "return_type": "void"
        },
        {
          "name": "play",
          "description": "Increases the pet's happiness level by the specified amount, up to a maximum of 100, and decreases its energy level by half the specified amount.",
          "parameters": [
            "double amount"
          ],
          "return_type": "void"
        },
        {
          "name": "clean",
          "description": "Increases the pet's cleanliness level by the specified amount, up to a maximum of 100.",
          "parameters": [
            "double amount"
          ],
          "return_type": "void"
        },
        {
          "name": "exercise",
          "description": "Increases the pet's health level by the specified amount, up to a maximum of 100, and decreases its energy level by the specified amount.",
          "parameters": [
            "double amount"
          ],
          "return_type": "void"
        },
        {
          "name": "rest",
          "description": "Increases the pet's energy level by the specified amount, up to a maximum of 100.",
          "parameters": [
            "double amount"
          ],
          "return_type": "void"
        },
        {
          "name": "update",
          "description": "Automatically updates the pet's state by decreasing its hunger, happiness, cleanliness, energy, and health levels over time. If any of these levels drop to 0, the pet is considered dead.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "tryEvolve",
          "description": "Attempts to evolve the pet to the next stage of its life cycle (e.g., from egg to baby, baby to child, etc.) based on certain requirements such as age and attribute levels.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "toJson",
          "description": "Converts the pet's state to a JSON map for serialization and storage.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Creates a new Pet instance from a JSON map, deserializing the pet's state.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "Pet"
        }
      ],
      "dependencies": [
        "my_app/models/enums/pet_state.dart"
      ]
    },
    {
      "name": "lib/services/pet_service.dart",
      "description": "The PetService class is responsible for managing the lifecycle and state of a single pet within the application. It provides a centralized interface for creating, feeding, playing with, cleaning, exercising, and resting the pet, as well as handling pet evolution. This service ensures that the pet's well-being is maintained and that the application's pet-related functionality is consistent and reliable.",
      "class_diagram": "@startuml\nclass PetService {\n  - _currentPet: Pet\n  + get currentPet: Pet\n  + get hasPet: bool\n  + createPet(name: String, type: String)\n  + updatePet()\n  + feed(amount: double)\n  + play(amount: double)\n  + clean(amount: double)\n  + exercise(amount: double)\n  + rest(amount: double)\n  + toJson(): Map<String, dynamic>\n  + loadFromJson(json: Map<String, dynamic>)\n}\n@enduml",
      "methods": [
        {
          "name": "createPet",
          "description": "Creates a new pet with the specified name and type, and sets it as the current pet.",
          "parameters": [
            "name: String",
            "type: String"
          ],
          "return_type": "void"
        },
        {
          "name": "updatePet",
          "description": "Updates the current pet, including checking for evolution and notifying any listeners.",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "feed",
          "description": "Feeds the current pet the specified amount, if the pet is alive.",
          "parameters": [
            "amount: double"
          ],
          "return_type": "void"
        },
        {
          "name": "play",
          "description": "Plays with the current pet the specified amount, if the pet is alive.",
          "parameters": [
            "amount: double"
          ],
          "return_type": "void"
        },
        {
          "name": "clean",
          "description": "Cleans the current pet the specified amount, if the pet is alive.",
          "parameters": [
            "amount: double"
          ],
          "return_type": "void"
        },
        {
          "name": "exercise",
          "description": "Exercises the current pet the specified amount, if the pet is alive.",
          "parameters": [
            "amount: double"
          ],
          "return_type": "void"
        },
        {
          "name": "rest",
          "description": "Allows the current pet to rest the specified amount, if the pet is alive.",
          "parameters": [
            "amount: double"
          ],
          "return_type": "void"
        },
        {
          "name": "toJson",
          "description": "Converts the current pet's data to a JSON map.",
          "parameters": [],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "loadFromJson",
          "description": "Loads the current pet's data from a JSON map.",
          "parameters": [
            "json: Map<String, dynamic>"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/models/pet.dart"
      ]
    },
    {
      "name": "lib/services/time_service.dart",
      "description": "The TimeService class is responsible for managing the game loop and updating the pet's state at regular intervals. It integrates with the PetService to handle the core game logic and ensure the pet's progress is updated consistently.",
      "class_diagram": "@startuml\nclass TimeService {\n  - PetService _petService\n  - Timer? _gameTimer\n\n  + TimeService(PetService)\n  + startGameLoop()\n  + stopGameLoop()\n  + dispose()\n}\n@enduml",
      "methods": [
        {
          "name": "TimeService",
          "description": "Constructor that takes a PetService instance and initializes the TimeService.",
          "parameters": [
            "PetService"
          ],
          "return_type": null
        },
        {
          "name": "startGameLoop",
          "description": "Starts the game loop, which updates the pet's state every second by calling the updatePet method on the PetService.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "stopGameLoop",
          "description": "Stops the game loop by canceling the existing Timer.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "dispose",
          "description": "Stops the game loop and releases any resources used by the TimeService.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "dart:async",
        "my_app/services/pet_service.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/pet_shop/pet_shop_sheet.dart",
      "description": "This Dart file defines a custom bottom sheet widget called `PetShopSheet` that provides an interface for purchasing pet-related items in an application. The main purpose of this file is to encapsulate the UI and functionality of a pet shop interface that allows users to purchase food, toys, and medicine for their pets.",
      "class_diagram": "@startuml\nclass PetShopSheet extends StatelessWidget {\n  - Function(SheetResponse)? completer\n  - SheetRequest request\n  + build(BuildContext): Widget\n}\n\nclass _ShopItem extends StatelessWidget {\n  - String name\n  - String price\n  - IconData icon\n  - VoidCallback onTap\n  + build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the `PetShopSheet` widget, which includes a title, a list of shop items (food, toys, and medicine), and a 'Buy' button for each item.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        },
        {
          "name": "build",
          "description": "Builds the UI for a single shop item in the `PetShopSheet`, including an icon, the item name, the price, and a 'Buy' button.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/services/game_service.dart",
      "description": "The `GameService` class is responsible for managing the games and interactions that a user can play with their virtual pet. It provides the core functionality for feeding, cleaning, and exercising the pet, and simulates the results of these games to update the pet's state accordingly.",
      "class_diagram": "@startuml\nclass GameService {\n  - PetService _petService\n  - Random _random\n\n  + playFeedingGame(): double\n  + playCleaningGame(): double\n  + playExerciseGame(): double\n}\n@enduml",
      "methods": [
        {
          "name": "playFeedingGame",
          "description": "Simulates a feeding game for the user's pet, updating the pet's hunger level accordingly.",
          "parameters": null,
          "return_type": "double"
        },
        {
          "name": "playCleaningGame",
          "description": "Simulates a cleaning game for the user's pet, updating the pet's cleanliness level accordingly.",
          "parameters": null,
          "return_type": "double"
        },
        {
          "name": "playExerciseGame",
          "description": "Simulates an exercise game for the user's pet, updating the pet's fitness level accordingly.",
          "parameters": null,
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:my_app/services/pet_service.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/pet_evolution/pet_evolution_dialog.dart",
      "description": "The PetEvolutionDialog class is responsible for displaying a dialog that shows the evolution of a pet from one state to another. This dialog is used to visually represent the progression of a pet's growth and development within the application's game or virtual pet system.",
      "class_diagram": "@startuml\nclass PetEvolutionDialog {\n  + build(context: BuildContext): Widget\n  - _renderPetSprites(pet: PetEntity, newState: PetState): Widget\n  - _renderEvolutionMessage(pet: PetEntity, newState: PetState): Widget\n  - _renderContinueButton(completer: Function(DialogResponse)): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the PetEvolutionDialog, displaying the current and new pet states, an evolution message, and a continue button.",
          "parameters": [
            "context: BuildContext"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_renderPetSprites",
          "description": "Renders the pet sprite images for the current and new pet states.",
          "parameters": [
            "pet: PetEntity",
            "newState: PetState"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_renderEvolutionMessage",
          "description": "Renders the message congratulating the user on the pet's evolution.",
          "parameters": [
            "pet: PetEntity",
            "newState: PetState"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_renderContinueButton",
          "description": "Renders the 'Continue' button, which the user can press to dismiss the dialog.",
          "parameters": [
            "completer: Function(DialogResponse)"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/models/enums/pet_state.dart",
        "package:my_app/ui/widgets/pet_sprite/pet_sprite.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/pet_death/pet_death_dialog.dart",
      "description": "The `PetDeathDialog` class is responsible for displaying a dialog to the user when a pet in the application has passed away. This dialog provides a respectful and informative way to notify the user of their pet's demise, and offers them the option to start a new journey by creating a new pet.",
      "class_diagram": "@startuml\nclass PetDeathDialog {\n  +final DialogRequest request\n  +final Function(DialogResponse) completer\n  +build(context: BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the pet death dialog, including the pet sprite, the farewell message, and the 'Start New Journey' button.",
          "parameters": [
            "context: BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked_services/stacked_services.dart",
        "my_app/ui/widgets/pet_sprite/pet_sprite.dart"
      ]
    },
    {
      "name": "lib/features/pet_creation/pet_creation_view.dart",
      "description": "This file defines the `PetCreationView` class, which is responsible for the user interface and interaction for creating a new pet in the application. It provides a visual interface for users to enter the pet's name, select the pet type, and initiate the pet creation process.",
      "class_diagram": "@startuml\nclass PetCreationView {\n  +builder(context, viewModel, child): Widget\n  +viewModelBuilder(context): PetCreationViewModel\n}\n\nclass PetCreationViewModel {\n  +setName(name: String): void\n  +setType(type: String): void\n  +createPet(): Future<void>\n  +selectedType: String\n  +modelError: dynamic\n  +isBusy: bool\n}\n\nclass _PetTypeOption {\n  +type: String\n  +emoji: String\n  +isSelected: bool\n  +onSelect(type: String): void\n  +build(context): Widget\n}\n\nPetCreationView -down-> PetCreationViewModel\nPetCreationView -down-> _PetTypeOption\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the PetCreationView, including the app bar, text fields, pet type options, and the create pet button.",
          "parameters": [
            "context",
            "viewModel",
            "child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the PetCreationViewModel, which is used to manage the state and business logic for the pet creation process.",
          "parameters": [
            "context"
          ],
          "return_type": "PetCreationViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/pet_creation/pet_creation_viewmodel.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/widgets/action_button/action_button.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/pet_sprite/pet_sprite.dart",
      "description": "The PetSprite class is responsible for rendering a visual representation of a pet in the application. It displays an emoji-based sprite that reflects the current state of the pet, such as whether it's an egg, alive, or dead. The sprite is displayed within a circular container and can be sized according to the user's needs.",
      "class_diagram": "@startuml\nclass PetSprite {\n  -String petType\n  -PetState state\n  -double size\n  +build(BuildContext): Widget\n  -_getEmoji(): String\n  -_getBackgroundColor(): Color\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the widget tree for the PetSprite, including the circular container and the emoji-based sprite.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_getEmoji",
          "description": "Determines the appropriate emoji to display based on the pet's type and state.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "_getBackgroundColor",
          "description": "Determines the background color for the PetSprite based on the pet's state.",
          "parameters": null,
          "return_type": "Color"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/models/enums/pet_state.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/stat_bar/stat_bar.dart",
      "description": "The `StatBar` widget is responsible for displaying a visual representation of a statistic or progress value. It provides a reusable and customizable UI component that can be used throughout the application to present key metrics or data points.",
      "class_diagram": "@startuml\nclass StatBar extends StatelessWidget {\n  +String label\n  +double value\n  +Color color\n  +double height\n  +double width\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the UI for the `StatBar` widget, which includes a label, a progress bar, and a numeric value display.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/mini_games/cleaning/cleaning_game_viewmodel.dart",
      "description": "The CleaningGameViewModel is responsible for managing the logic and state of the cleaning mini-game within the application. It handles user interactions, calculates the player's cleanliness score, and provides functionality to complete the game.",
      "class_diagram": "@startuml\nclass CleaningGameViewModel {\n  - _gameService : GameService\n  - _navigationService : NavigationService\n  - _cleanedAreas : List<Offset>\n  - _cleanlinessScore : double\n\n  + get cleanedAreas() : List<Offset>\n  + get cleanlinessScore() : double\n\n  + onDrag(DragUpdateDetails) : void\n  - _updateScore() : void\n  + finishGame() : Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "onDrag",
          "description": "Handles the user's drag gestures, adding the drag positions to the list of cleaned areas and updating the cleanliness score.",
          "parameters": [
            "DragUpdateDetails"
          ],
          "return_type": "void"
        },
        {
          "name": "_updateScore",
          "description": "Calculates the cleanliness score based on the number of cleaned areas.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "finishGame",
          "description": "Completes the cleaning game, saves the game progress, and navigates back to the previous screen.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/app/app.locator.dart",
        "my_app/services/game_service.dart"
      ]
    },
    {
      "name": "lib/features/mini_games/feeding/feeding_game_view.dart",
      "description": "This file contains the main view for a feeding mini-game in a Flutter application. The feeding game is a simple game where the user taps on falling food items to feed a pet, earning points in the process. The view handles the game's UI, user interactions, and integration with the game's view model.",
      "class_diagram": "@startuml\nclass FeedingGameView extends StackedView<FeedingGameViewModel> {\n    - Scaffold\n    - GestureDetector\n    - Container\n    - Stack\n    - Positioned\n    - Text\n    - ElevatedButton\n    + builder(BuildContext, FeedingGameViewModel, Widget?)\n    + viewModelBuilder(BuildContext): FeedingGameViewModel\n    + onViewModelReady(FeedingGameViewModel)\n    + onDispose(FeedingGameViewModel)\n}\n\nclass FeedingGameViewModel {\n    - Food[]\n    - score: double\n    - modelError: String?\n    + onTapFood(Offset)\n    + startGame()\n    + finishGame()\n    + dispose()\n}\n\nclass Food {\n    + position: Offset\n    + isCollected: bool\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the main UI for the feeding game view, including the game area, score display, and buttons.",
          "parameters": [
            "BuildContext",
            "FeedingGameViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the FeedingGameViewModel to be used by the view.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "FeedingGameViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the view model is ready, starting the game.",
          "parameters": [
            "FeedingGameViewModel"
          ],
          "return_type": null
        },
        {
          "name": "onDispose",
          "description": "Called when the view is disposed, allowing the view model to clean up any resources.",
          "parameters": [
            "FeedingGameViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/mini_games/feeding/feeding_game_viewmodel.dart",
        "package:my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/features/mini_games/exercise/exercise_game_view.dart",
      "description": "A Flutter view for an interactive exercise mini-game where users can tap and hold a button to earn exercise points for their virtual pet, with game progression and point tracking",
      "class_diagram": "@startuml\nclass ExerciseGameView {\n  +builder(BuildContext, ExerciseGameViewModel)\n  +viewModelBuilder(BuildContext)\n  +onDispose(ExerciseGameViewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the UI for the exercise game, including exercise points display, interactive jumping button, and game controls",
          "parameters": [
            "BuildContext",
            "ExerciseGameViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates and initializes the view model for the exercise game",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "ExerciseGameViewModel"
        },
        {
          "name": "onDispose",
          "description": "Manages cleanup and resource release when the view is disposed",
          "parameters": [
            "ExerciseGameViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "my_app/features/mini_games/exercise/exercise_game_viewmodel.dart",
        "my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/features/pet_home/pet_home_view.dart",
      "description": "The PetHomeView class is responsible for displaying the main user interface for the pet management feature of the application. It provides a comprehensive view of the user's pet, including its current state, statistics, and interactive actions to care for the pet.",
      "class_diagram": "@startuml\nclass PetHomeView {\n  + builder(BuildContext, PetHomeViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): PetHomeViewModel\n  + onViewModelReady(PetHomeViewModel): void\n}\n\nclass PetHomeViewModel {\n  + petName: String\n  + petType: PetType\n  + petState: PetState\n  + hunger: double\n  + happiness: double\n  + health: double\n  + cleanliness: double\n  + energy: double\n  + modelError: String?\n  + hasPet: bool\n  + isAlive: bool\n  + stateDisplay: String\n  + ageDisplay: String\n  + openShop(): void\n  + startFeedingGame(): void\n  + startCleaningGame(): void\n  + startExerciseGame(): void\n  + init(): void\n}\n\nPetHomeView --> PetHomeViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the main UI for the PetHomeView, including the pet's information, stats, and interactive buttons.",
          "parameters": [
            "BuildContext",
            "PetHomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates a new instance of the PetHomeViewModel, which provides the data and logic for the PetHomeView.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PetHomeViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the PetHomeViewModel when the view is ready.",
          "parameters": [
            "PetHomeViewModel"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/pet_home/pet_home_viewmodel.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/widgets/pet_sprite/pet_sprite.dart",
        "package:my_app/ui/widgets/action_button/action_button.dart",
        "package:my_app/ui/widgets/stat_bar/stat_bar.dart"
      ]
    },
    {
      "name": "lib/features/mini_games/cleaning/cleaning_game_view.dart",
      "description": "This Dart file defines the view for a cleaning mini-game in a Flutter application. The main purpose of this file is to provide the user interface and interaction for a game where the user cleans a pet by dragging their finger on the screen.",
      "class_diagram": "@startuml\nclass CleaningGameView extends StackedView<CleaningGameViewModel> {\n  + builder(BuildContext context, CleaningGameViewModel viewModel, Widget? child): Widget\n  + viewModelBuilder(BuildContext context): CleaningGameViewModel\n}\n\nclass CleaningGameViewModel {\n  + modelError: dynamic\n  + cleanlinessScore: double\n  + cleanedAreas: List<Offset>\n  + onDrag(DragUpdateDetails details): void\n  + finishGame(): void\n}\n\nclass CleaningPainter extends CustomPainter {\n  + cleanedAreas: List<Offset>\n  + paint(Canvas canvas, Size size): void\n  + shouldRepaint(CleaningPainter oldDelegate): bool\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the cleaning game view, including the game area, cleanliness score, and finish button.",
          "parameters": [
            "BuildContext context",
            "CleaningGameViewModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the CleaningGameViewModel, which manages the state and logic of the cleaning game.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "CleaningGameViewModel"
        },
        {
          "name": "onDrag",
          "description": "Handles the user's drag gestures on the game area, updating the cleaned areas and cleanliness score.",
          "parameters": [
            "DragUpdateDetails details"
          ],
          "return_type": "void"
        },
        {
          "name": "finishGame",
          "description": "Allows the user to finish the cleaning game, potentially saving the result or navigating to another screen.",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "paint",
          "description": "Draws the cleaned areas on the game area using a CustomPainter.",
          "parameters": [
            "Canvas canvas",
            "Size size"
          ],
          "return_type": "void"
        },
        {
          "name": "shouldRepaint",
          "description": "Determines whether the CleaningPainter should be repainted when the cleaned areas change.",
          "parameters": [
            "CleaningPainter oldDelegate"
          ],
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/mini_games/cleaning/cleaning_game_viewmodel.dart",
        "package:my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/action_button/action_button.dart",
      "description": "The ActionButton class is a reusable Flutter widget that provides a customizable button with an icon and label. It is designed to encapsulate the common functionality of an action-oriented button, making it easy to incorporate into various parts of the application UI.",
      "class_diagram": "@startuml\nclass ActionButton {\n  - String label\n  - IconData icon\n  - VoidCallback onPressed\n  - Color? color\n  - bool isEnabled\n  + Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the ActionButton, including the ElevatedButton and its child Row with the icon and label.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant PetCreationView\nparticipant PetCreationViewModel\nparticipant PetHomeView\nparticipant PetHomeViewModel\nparticipant PetStatsView\nparticipant PetStatsViewModel\nparticipant FeedingGameView\nparticipant FeedingGameViewModel\nparticipant CleaningGameView\nparticipant CleaningGameViewModel\nparticipant ExerciseGameView\nparticipant ExerciseGameViewModel\nparticipant PetShopSheet\nparticipant PetService\nparticipant TimeService\nparticipant GameService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact (e.g., show dialog, show bottom sheet)\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\nUser -> PetCreationView: Create new pet\nPetCreationView -> PetCreationViewModel: Handle user input and create pet\nPetCreationViewModel -> PetService: Create new pet\nUser -> PetHomeView: View pet\nPetHomeView -> PetHomeViewModel: Initialize\nPetHomeViewModel -> PetService: Get current pet\nPetHomeViewModel -> TimeService: Start game loop\nUser -> PetHomeView: Interact (e.g., feed, clean, exercise pet)\nPetHomeViewModel -> GameService: Simulate game interactions\nPetHomeViewModel -> PetService: Update pet state\nUser -> PetStatsView: View pet stats\nPetStatsView -> PetStatsViewModel: Initialize\nPetStatsViewModel -> PetService: Get current pet\nUser -> FeedingGameView: Start feeding game\nFeedingGameView -> FeedingGameViewModel: Initialize\nFeedingGameViewModel -> GameService: Simulate feeding game\nUser -> CleaningGameView: Start cleaning game\nCleaningGameView -> CleaningGameViewModel: Initialize\nCleaningGameViewModel -> GameService: Simulate cleaning game\nUser -> ExerciseGameView: Start exercise game\nExerciseGameView -> ExerciseGameViewModel: Initialize\nExerciseGameViewModel -> GameService: Simulate exercise game\nUser -> PetShopSheet: Open pet shop\nPetShopSheet -> PetHomeViewModel: Handle user purchases\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each view has a corresponding ViewModel that handles the business logic and state for that view. The ViewModels are responsible for updating the UI, interacting with services (e.g., DialogService, BottomSheetService, PetService, GameService), and managing the application's overall state. The app.locator.dart file sets up the necessary dependency injections, allowing the ViewModels to access the required services. The PetService and TimeService are central to the pet management functionality, handling the pet's state updates and game loop, respectively.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router, defined in app.router.dart. The main entry point is the AppView, which initializes the Stacked architecture and displays the StartupView. After the startup logic is completed, the StartupViewModel navigates to the HomeView. The HomeView allows the user to interact with the application, triggering updates to the HomeViewModel, which in turn updates the UI and can show dialogs or bottom sheets as needed. The user can also navigate to the PetCreationView to create a new pet, the PetHomeView to manage their existing pet, and the PetStatsView to view the pet's detailed statistics. The mini-game views (FeedingGameView, CleaningGameView, ExerciseGameView) are accessed from the PetHomeView."
}